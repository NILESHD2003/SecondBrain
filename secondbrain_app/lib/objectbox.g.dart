// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'data/models/document_chunk.dart';
import 'data/models/memory.dart';
import 'data/models/memory_file.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
    id: const obx_int.IdUid(1, 7975037181421861510),
    name: 'DocumentChunk',
    lastPropertyId: const obx_int.IdUid(5, 7287317178056688653),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 7556720518965940549),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 8838533048450675470),
        name: 'content',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 8027945831228924960),
        name: 'chunkIndex',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 2697544654728197901),
        name: 'embedding',
        type: 28,
        flags: 8,
        indexId: const obx_int.IdUid(1, 8370301581641095341),
        hnswParams: obx_int.ModelHnswParams(dimensions: 768, distanceType: 2),
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 7287317178056688653),
        name: 'memoryFileId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(2, 2291054963025571713),
        relationTarget: 'MemoryFile',
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(2, 4561559691528468526),
    name: 'Memory',
    lastPropertyId: const obx_int.IdUid(4, 6296313971079142878),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 2060394553252611962),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 3750016121315215111),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 2437768544746520854),
        name: 'description',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 6296313971079142878),
        name: 'createdAt',
        type: 10,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[
      obx_int.ModelRelation(
        id: const obx_int.IdUid(1, 2155590203574764322),
        name: 'files',
        targetId: const obx_int.IdUid(3, 7020940648041645322),
      ),
    ],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(3, 7020940648041645322),
    name: 'MemoryFile',
    lastPropertyId: const obx_int.IdUid(8, 46857264150937148),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 4619244408688750499),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 4592482315729263788),
        name: 'autoName',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 6996650781958062312),
        name: 'originalName',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 4405367489932526617),
        name: 'filePath',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 5131002834754317757),
        name: 'sizeBytes',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 1453470508134308440),
        name: 'mimeType',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 3062943303223727931),
        name: 'addedAt',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 46857264150937148),
        name: 'memoryId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(3, 8027092618750551312),
        relationTarget: 'Memory',
      ),
    ],
    relations: <obx_int.ModelRelation>[
      obx_int.ModelRelation(
        id: const obx_int.IdUid(2, 4630218674176130681),
        name: 'chunks',
        targetId: const obx_int.IdUid(1, 7975037181421861510),
      ),
    ],
    backlinks: <obx_int.ModelBacklink>[],
  ),
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore({
  String? directory,
  int? maxDBSizeInKB,
  int? maxDataSizeInKB,
  int? fileMode,
  int? maxReaders,
  bool queriesCaseSensitiveDefault = true,
  String? macosApplicationGroup,
}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(
    getObjectBoxModel(),
    directory: directory ?? (await defaultStoreDirectory()).path,
    maxDBSizeInKB: maxDBSizeInKB,
    maxDataSizeInKB: maxDataSizeInKB,
    fileMode: fileMode,
    maxReaders: maxReaders,
    queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
    macosApplicationGroup: macosApplicationGroup,
  );
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
    entities: _entities,
    lastEntityId: const obx_int.IdUid(3, 7020940648041645322),
    lastIndexId: const obx_int.IdUid(3, 8027092618750551312),
    lastRelationId: const obx_int.IdUid(2, 4630218674176130681),
    lastSequenceId: const obx_int.IdUid(0, 0),
    retiredEntityUids: const [],
    retiredIndexUids: const [],
    retiredPropertyUids: const [],
    retiredRelationUids: const [],
    modelVersion: 5,
    modelVersionParserMinimum: 5,
    version: 1,
  );

  final bindings = <Type, obx_int.EntityDefinition>{
    DocumentChunk: obx_int.EntityDefinition<DocumentChunk>(
      model: _entities[0],
      toOneRelations: (DocumentChunk object) => [object.memoryFile],
      toManyRelations: (DocumentChunk object) => {},
      getId: (DocumentChunk object) => object.id,
      setId: (DocumentChunk object, int id) {
        object.id = id;
      },
      objectToFB: (DocumentChunk object, fb.Builder fbb) {
        final contentOffset = fbb.writeString(object.content);
        final embeddingOffset = fbb.writeListFloat32(object.embedding);
        fbb.startTable(6);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, contentOffset);
        fbb.addInt64(2, object.chunkIndex);
        fbb.addOffset(3, embeddingOffset);
        fbb.addInt64(4, object.memoryFile.targetId);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final contentParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final chunkIndexParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          8,
          0,
        );
        final embeddingParam = const obx_int.Float32ListReader().vTableGet(
          buffer,
          rootOffset,
          10,
          Float32List(0),
        );
        final object = DocumentChunk(
          id: idParam,
          content: contentParam,
          chunkIndex: chunkIndexParam,
          embedding: embeddingParam,
        );
        object.memoryFile.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          12,
          0,
        );
        object.memoryFile.attach(store);
        return object;
      },
    ),
    Memory: obx_int.EntityDefinition<Memory>(
      model: _entities[1],
      toOneRelations: (Memory object) => [],
      toManyRelations: (Memory object) => {
        obx_int.RelInfo<Memory>.toMany(1, object.id): object.files,
      },
      getId: (Memory object) => object.id,
      setId: (Memory object, int id) {
        object.id = id;
      },
      objectToFB: (Memory object, fb.Builder fbb) {
        final nameOffset = fbb.writeString(object.name);
        final descriptionOffset = fbb.writeString(object.description);
        fbb.startTable(5);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, nameOffset);
        fbb.addOffset(2, descriptionOffset);
        fbb.addInt64(3, object.createdAt.millisecondsSinceEpoch);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final descriptionParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final createdAtParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0),
        );
        final object = Memory(
          id: idParam,
          name: nameParam,
          description: descriptionParam,
          createdAt: createdAtParam,
        );
        obx_int.InternalToManyAccess.setRelInfo<Memory>(
          object.files,
          store,
          obx_int.RelInfo<Memory>.toMany(1, object.id),
        );
        return object;
      },
    ),
    MemoryFile: obx_int.EntityDefinition<MemoryFile>(
      model: _entities[2],
      toOneRelations: (MemoryFile object) => [object.memory],
      toManyRelations: (MemoryFile object) => {
        obx_int.RelInfo<MemoryFile>.toMany(2, object.id): object.chunks,
      },
      getId: (MemoryFile object) => object.id,
      setId: (MemoryFile object, int id) {
        object.id = id;
      },
      objectToFB: (MemoryFile object, fb.Builder fbb) {
        final autoNameOffset = fbb.writeString(object.autoName);
        final originalNameOffset = fbb.writeString(object.originalName);
        final filePathOffset = fbb.writeString(object.filePath);
        final mimeTypeOffset = fbb.writeString(object.mimeType);
        fbb.startTable(9);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, autoNameOffset);
        fbb.addOffset(2, originalNameOffset);
        fbb.addOffset(3, filePathOffset);
        fbb.addInt64(4, object.sizeBytes);
        fbb.addOffset(5, mimeTypeOffset);
        fbb.addInt64(6, object.addedAt.millisecondsSinceEpoch);
        fbb.addInt64(7, object.memory.targetId);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final autoNameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final originalNameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final filePathParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 10, '');
        final sizeBytesParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          12,
          0,
        );
        final mimeTypeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 14, '');
        final addedAtParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0),
        );
        final object = MemoryFile(
          id: idParam,
          autoName: autoNameParam,
          originalName: originalNameParam,
          filePath: filePathParam,
          sizeBytes: sizeBytesParam,
          mimeType: mimeTypeParam,
          addedAt: addedAtParam,
        );
        object.memory.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          18,
          0,
        );
        object.memory.attach(store);
        obx_int.InternalToManyAccess.setRelInfo<MemoryFile>(
          object.chunks,
          store,
          obx_int.RelInfo<MemoryFile>.toMany(2, object.id),
        );
        return object;
      },
    ),
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [DocumentChunk] entity fields to define ObjectBox queries.
class DocumentChunk_ {
  /// See [DocumentChunk.id].
  static final id = obx.QueryIntegerProperty<DocumentChunk>(
    _entities[0].properties[0],
  );

  /// See [DocumentChunk.content].
  static final content = obx.QueryStringProperty<DocumentChunk>(
    _entities[0].properties[1],
  );

  /// See [DocumentChunk.chunkIndex].
  static final chunkIndex = obx.QueryIntegerProperty<DocumentChunk>(
    _entities[0].properties[2],
  );

  /// See [DocumentChunk.embedding].
  static final embedding = obx.QueryHnswProperty<DocumentChunk>(
    _entities[0].properties[3],
  );

  /// See [DocumentChunk.memoryFile].
  static final memoryFile = obx.QueryRelationToOne<DocumentChunk, MemoryFile>(
    _entities[0].properties[4],
  );
}

/// [Memory] entity fields to define ObjectBox queries.
class Memory_ {
  /// See [Memory.id].
  static final id = obx.QueryIntegerProperty<Memory>(
    _entities[1].properties[0],
  );

  /// See [Memory.name].
  static final name = obx.QueryStringProperty<Memory>(
    _entities[1].properties[1],
  );

  /// See [Memory.description].
  static final description = obx.QueryStringProperty<Memory>(
    _entities[1].properties[2],
  );

  /// See [Memory.createdAt].
  static final createdAt = obx.QueryDateProperty<Memory>(
    _entities[1].properties[3],
  );

  /// see [Memory.files]
  static final files = obx.QueryRelationToMany<Memory, MemoryFile>(
    _entities[1].relations[0],
  );
}

/// [MemoryFile] entity fields to define ObjectBox queries.
class MemoryFile_ {
  /// See [MemoryFile.id].
  static final id = obx.QueryIntegerProperty<MemoryFile>(
    _entities[2].properties[0],
  );

  /// See [MemoryFile.autoName].
  static final autoName = obx.QueryStringProperty<MemoryFile>(
    _entities[2].properties[1],
  );

  /// See [MemoryFile.originalName].
  static final originalName = obx.QueryStringProperty<MemoryFile>(
    _entities[2].properties[2],
  );

  /// See [MemoryFile.filePath].
  static final filePath = obx.QueryStringProperty<MemoryFile>(
    _entities[2].properties[3],
  );

  /// See [MemoryFile.sizeBytes].
  static final sizeBytes = obx.QueryIntegerProperty<MemoryFile>(
    _entities[2].properties[4],
  );

  /// See [MemoryFile.mimeType].
  static final mimeType = obx.QueryStringProperty<MemoryFile>(
    _entities[2].properties[5],
  );

  /// See [MemoryFile.addedAt].
  static final addedAt = obx.QueryDateProperty<MemoryFile>(
    _entities[2].properties[6],
  );

  /// See [MemoryFile.memory].
  static final memory = obx.QueryRelationToOne<MemoryFile, Memory>(
    _entities[2].properties[7],
  );

  /// see [MemoryFile.chunks]
  static final chunks = obx.QueryRelationToMany<MemoryFile, DocumentChunk>(
    _entities[2].relations[0],
  );
}
